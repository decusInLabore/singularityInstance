BootStrap: docker
From: ubuntu:22.04
 
%labels
    APPLICATION_NAME R 4.3.1 and python 3.12 on Jammy 22.04
    AUTHOR_Name Stefan Boeing
    YEAR 2023
 
%help
    This container conatins:
        R 4.3.1 and python 3.9 on Ubuntu
 
%environment
    # Set system locale
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    LANG=C.UTF-8 LC_ALL=C.UTF-8 
    export CXX17='g++11 -std=gnu++17 -fPIC'

%post
    # Change to tmp directory to download temporary files
    if [ ! -d /tmp/singularity-build ]; then
      mkdir -p /tmp/singularity-build
    fi
 
    cd /tmp/singularity-build
 
    echo "Installing compilers and libraries"
    apt-get -qq -y update
   
    export DEBIAN_FRONTEND=noninteractive
    apt-get -qq install -y --no-install-recommends tzdata apt-utils software-properties-common
 
    ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
    
    
    
    apt-get -y update
    apt-get -y --no-install-recommends upgrade
    apt-get -y update

    apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        build-essential \
        bzip2 \
        ca-certificates \
        cmake \
        curl \
        fuse \
        gfortran \
        gcc \
        g++ \
        git \
        gdal-bin \
        libavfilter-dev \
        libgdal-dev \
        libtool \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libatlas-base-dev \
        libxml2-dev \
        libcairo2-dev \
        libeigen3-dev \
        libcupti-dev \
        libpcre2-dev \
        libpcre3-dev \
        libssl-dev \
        libcurl4-openssl-dev \
        libboost-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libboost-serialization-dev \
        libboost-regex-dev \
        libfribidi-dev \
        libgtk2.0-dev \
        libreadline-dev \
        libbz2-dev \
        liblzma-dev \
        libhdf5-dev \
        libpcre++-dev \
        libpango1.0-dev \
        libopenblas-dev \
        liblapack-dev \
        libudunits2-dev \
        libv8-dev \
        libxt-dev \
        libgsl-dev \
        openjdk-8-jdk \
        pandoc \
        proj-bin \
        python3 \
        python3-pip \
        python3-dev \
        tcl \
        tcl-dev \
        tk \
        tk-dev \
        texlive \
        texlive-fonts-extra \
        texinfo \
        tzdata \
        vim \
        wget \
        xvfb \
        xauth \
        xfonts-base \
        zlib1g-dev \
        zip
 
       
        export LANG=C.UTF-8 LC_ALL=C.UTF-8
        export PYTHONPATH=$PYTHONPATH:/bin/

# Clean /tmp of any previous downloads
        rm -rf /tmp/singularity-build/*
 
# Install Quarto
        # Install Quarto
        # export QUARTO_VERSION="1.3.450"
        # wget https://quarto.org/download/latest/quarto-linux-amd64.deb
        apt-get install -y --no-install-recommends \
          gdebi-core
          # gdebi quarto-linux-amd64.deb
          #rm quarto-linux-amd64.deb
   
        wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.3.450/quarto-1.3.450-linux-amd64.deb
        dpkg -i quarto-1.3.450-linux-amd64.deb
   
        rm quarto-1.3.450-linux-amd64.deb
        apt-get clean

# Install libgit2
        #wget -q https://github.com/libgit2/libgit2/releases/download/v1.1.0/libgit2-1.1.0.tar.gz
        #tar -zxf libgit2-1.1.0.tar.gz
        #cd libgit2-1.1.0
        #mkdir build && cd build
        #cmake ..
        #cmake --build . --target install
        #cd /tmp/singularity-build
 
# Install PCRE2
        #wget -q https://ftp.pcre.org/pub/pcre/pcre2-10.36.tar.gz
        #tar -zxvf pcre2-10.36.tar.gz
        #cd pcre2-10.36
        #./configure
        #make
        #make install
        #cd /tmp/singularity-build
 
# Install R 4.3.1
        wget -q https://cran.r-project.org/src/base/R-4/R-4.3.1.tar.gz
        tar -zxf R-4.3.1.tar.gz
        cd R-4.3.1
        ./configure
        make
        make install
        cd /tmp/singularity-build
 
# Cleanup
    echo "Cleaning"
    apt-get -qq clean
    rm -rf /var/lib/apt/lists/*
    rm -rf tmp/singularity-build/*

# Install Jupyter notebook
        echo "Installing Jupyter notebook"
        python3 -m pip --no-cache-dir install --upgrade pip > /dev/null
        python3 -m pip --no-cache-dir install jupyter > /dev/null

        R --quiet --slave -e 'install.packages(c("IRkernel"), repos="https://cloud.r-project.org/")' > /dev/null
        R --quiet --slave -e 'IRkernel::installspec()' > /dev/null

# Install R packages
        echo "Installing R packages"
        R --quiet --slave -e 'install.packages("renv", repos="https://cloud.r-project.org/")' > /dev/null

